> make
make: `CrossReference' is up to date.
> CrossReference NEWTON.PAS

Page    1  NEWTON.PAS  Sun Apr 27 22:36:24 2014


   1: PROGRAM newton (input, output);

Page    1  NEWTON.PAS  Sun Apr 27 22:36:24 2014


    >> PROGRAM		program
    >> <IDENTIFIER>		newton
    >> (		(
    >> <IDENTIFIER>		input
    >> ,		,
    >> <IDENTIFIER>		output
    >> )		)
    >> ;		;
   2: 
   3: CONST
    >> CONST		const
   4:     epsilon = 1e-6;
    >> <IDENTIFIER>		epsilon
    >> =		=
    >> <NUMBER>		1e-06 (real)
    >> ;		;
   5: 
   6: VAR
    >> VAR		var
   7:     number, root, sqroot : real;
    >> <IDENTIFIER>		number
    >> ,		,
    >> <IDENTIFIER>		root
    >> ,		,
    >> <IDENTIFIER>		sqroot
    >> :		:
    >> <IDENTIFIER>		real
    >> ;		;
   8: 
   9: BEGIN
    >> BEGIN		begin
  10:     REPEAT
    >> REPEAT		repeat
  11: 	writeln;
    >> <IDENTIFIER>		writeln
    >> ;		;
  12: 	write('Enter new number (0 to quit): ');
    >> <IDENTIFIER>		write
    >> (		(
    >> <STRING>		'Enter new number (0 to quit): '
    >> )		)
    >> ;		;
  13: 	read(number);
    >> <IDENTIFIER>		read
    >> (		(
    >> <IDENTIFIER>		number
    >> )		)
    >> ;		;
  14: 
  15: 	IF number = 0 THEN BEGIN
    >> IF		if
    >> <IDENTIFIER>		number
    >> =		=
    >> <NUMBER>		0 (integer)
    >> THEN		then
    >> BEGIN		begin
  16: 	    writeln(number:12:6, 0.0:12:6);
    >> <IDENTIFIER>		writeln
    >> (		(
    >> <IDENTIFIER>		number
    >> :		:
    >> <NUMBER>		12 (integer)
    >> :		:
    >> <NUMBER>		6 (integer)
    >> ,		,

Page    2  NEWTON.PAS  Sun Apr 27 22:36:24 2014


    >> <NUMBER>		0 (real)
    >> <NUMBER>		12 (integer)
    >> :		:
    >> <NUMBER>		6 (integer)
    >> )		)
    >> ;		;
  17: 	END
    >> END		end
  18: 	ELSE IF number < 0 THEN BEGIN
    >> ELSE		else
    >> IF		if
    >> <IDENTIFIER>		number
    >> <		<
    >> <NUMBER>		0 (integer)
    >> THEN		then
    >> BEGIN		begin
  19: 	    writeln('*** ERROR:  number < 0');
    >> <IDENTIFIER>		writeln
    >> (		(
    >> <STRING>		'*** ERROR:  number < 0'
    >> )		)
    >> ;		;
  20: 	END
    >> END		end
  21: 	ELSE BEGIN
    >> ELSE		else
    >> BEGIN		begin
  22: 	    sqroot := sqrt(number);
    >> <IDENTIFIER>		sqroot
    >> :=		:=
    >> <IDENTIFIER>		sqrt
    >> (		(
    >> <IDENTIFIER>		number
    >> )		)
    >> ;		;
  23: 	    writeln(number:12:6, sqroot:12:6);
    >> <IDENTIFIER>		writeln
    >> (		(
    >> <IDENTIFIER>		number
    >> :		:
    >> <NUMBER>		12 (integer)
    >> :		:
    >> <NUMBER>		6 (integer)
    >> ,		,
    >> <IDENTIFIER>		sqroot
    >> :		:
    >> <NUMBER>		12 (integer)
    >> :		:
    >> <NUMBER>		6 (integer)
    >> )		)
    >> ;		;
  24: 	    writeln;
    >> <IDENTIFIER>		writeln
    >> ;		;
  25: 
  26: 	    root := 1;
    >> <IDENTIFIER>		root
    >> :=		:=
    >> <NUMBER>		1 (integer)
    >> ;		;
  27: 	    REPEAT

Page    3  NEWTON.PAS  Sun Apr 27 22:36:24 2014


    >> REPEAT		repeat
  28: 		root := (number/root + root)/2;
    >> <IDENTIFIER>		root
    >> :=		:=
    >> (		(
    >> <IDENTIFIER>		number
    >> /		/
    >> <IDENTIFIER>		root
    >> +		+
    >> <IDENTIFIER>		root
    >> )		)
    >> /		/
    >> <NUMBER>		2 (integer)
    >> ;		;
  29: 		writeln(root:24:6,
    >> <IDENTIFIER>		writeln
    >> (		(
    >> <IDENTIFIER>		root
    >> :		:
    >> <NUMBER>		24 (integer)
    >> :		:
    >> <NUMBER>		6 (integer)
    >> ,		,
  30: 			100*abs(root - sqroot)/sqroot:12:2,
    >> <NUMBER>		100 (integer)
    >> *		*
    >> <IDENTIFIER>		abs
Segmentation fault: 11